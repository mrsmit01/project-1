import java.util.Scanner;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Random;


/** Creates GameDriver class.
 * Works with Player and Enemy class.
 */
public class DungeonCrawler {


    /** Main method used as engine.
     * @param args - not used.
     * @throws IOException 
     * @throws UnknownHostException 
     */
    public static void main(String[] args) throws UnknownHostException, IOException {

        // Setup:
        boolean gameRunning = true;
        int num = 0;
        int stage = 1;
        String address = ""; 
        
      
        		
        
        
        System.out.println("enter server address:");
        Scanner sc = new Scanner(System.in);
        address = sc.nextLine();
        Socket s = new  Socket(address,5000);
        DataInputStream din=new DataInputStream(s.getInputStream());  
        DataOutputStream dout=new DataOutputStream(s.getOutputStream());  
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));  

        System.out.println("Send Get to start...");
       
        
        

        // Introduce name of game:
        System.out.println("\n----------Welcome FATE STAY DUNGEON----------\n");

       

        // Ask for name of player:
        
        System.out.println("Before you can start your journey of trials   what is your  name ?");
        String tempName = sc.nextLine().trim();
            /*Could add a confirmation for name.*/

        // Create Player with param name:
        Players players = new Players(tempName);


        // Main Game Loop begins:
        while (gameRunning) {

            //Creates enemy:
            Enemy e1 = new Enemy();

            // Determines what # enemy:
            num += 1;
            if (num > 5) {
                num = 1;

                //Post Game enemy stats increased.
                if (stage  > 5) {
                    e1.levelUp();
                    e1.setLuck(1);
                }

                //Normal Game enemy stats increased.
                else {
                    e1.levelUp();
                }
            }

            // Check for Boss / Generate stats for boss:
            if (num == 5) {

                //End Boss set stats.
                if (stage == 5) {
                    e1.setName("SABER");
                    e1.setAttack(100);
                    e1.setHp(150);
                    e1.setDefense(0);
                    e1.setLuck(e1.getLuck());
                }
                else {

                    // Normal Bosses:
                    String[] eBossList = new String[15];
                    eBossList[0] = "ARCHER";
                    eBossList[1] = "LANCER";
                    eBossList[2] = "RIDER";
                    eBossList[3] = "BESERKER";
                    eBossList[4] = "CASTER";
                    eBossList[5] = "ASSASIN";
                    int eBossLength = 5;

                    Random rn = new Random();

                    String tName = eBossList[rn.nextInt(eBossLength + 1)];

                    //Post Game bosses stats increased:
                    if (stage > 5) {
                        e1.setName(tName);
                        e1.setAttack(e1.getAttack() + 40);
                        e1.setHp(e1.getHp() + 20);
                        e1.setDefense(e1.getDefense());
                        e1.setLuck(e1.getLuck());
                    }

                    //Normal game bosses stats:
                    else {
                        e1.setName(tName);
                        e1.setAttack(e1.getAttack() + 15);
                        e1.setHp(e1.getHp() + 20);
                        e1.setDefense(e1.getDefense() - 10);
                        e1.setLuck(e1.getLuck() - 1);
                    }
                }
            }

            // Enemy appears / Combat begins:
            System.out.println("\n*stage " + stage  + ": Enemy " + num + " of 5*");
            System.out.println("A " + e1.getName() + " appears!");
            boolean combat = true;

            // Combat Loop:
            while (combat) {
                System.out.println("");
                System.out.println(players.toString());
                System.out.println(e1.toString() + "\n");
                System.out.println("What do you want to do?");
                System.out.println("---[A]ttack, [D]odge, [H]eal---");
                String line = sc.next().toUpperCase();
                char action = line.charAt(0);
                System.out.println("");

                // Simplify variables:
                String eName = e1.getName();
                int pAtk = players.getAttack();

                // Switch for options available (Attack, Dodge, Heal):
                switch(action) {

                    // Try to attack:
                    case 'A':

                        //Player hits:
                        if (players.checkHit(players.getLuck())) {
                            e1.takeHit(pAtk - e1.getDefense());
                            int hit = pAtk - e1.getDefense();
                            System.out.println(eName + " took " + hit + " damage!");
                            if (e1.getHp() <= 0) {
                                break;
                            }
                        }

                        //Player misses:
                        else {
                            System.out.println("You missed!");
                        }

                        //Enemy hits:
                        if (e1.checkHit(e1.getLuck())) {
                            int hit = e1.getAttack() - players.getDefense();
                            System.out.println(eName + " hit you for " + hit + "!");
                            players.takeHit(e1.getAttack() - players.getDefense());
                        }

                        //Enemy misses:
                        else {
                            System.out.println(eName + " missed!");
                        }
                        break;

                    // Try to dodge:
                    case 'D':
                        System.out.println("You attempt to block the incoming attack!");

                        //Dodge failed:
                        if (e1.checkHit(e1.getLuck() + 3)) {
                            int hit = e1.getAttack() - players.getDefense();
                            System.out.println(eName + " still hit for " + hit + "!");
                            players.takeHit(e1.getAttack() - players.getDefense());
                        }

                        //Dodge is successful:
                        else {
                            System.out.println("You successfully dodged the incoming attack!");
                            System.out.println("You regained a small portion of your health!");
                            players.restoreHp(5 * players.getLevel());
                        }
                        break;

                    // Restore Health:
                    case 'H':

                        //If max health:
                        if (players.getHp() >= players.getMaxHp()) {
                            System.out.println("You are already at full health!");
                            break;
                        }

                        //Regain health (10hp * current player level):
                        else {
                            System.out.println("You use a potion to regain health!");
                            players.restoreHp(10 * players.getLevel());
                            System.out.println("Your health is now " + players.getHp() + ".");
                        }

                        //Check to see if enemy hits:
                        if (e1.checkHit(e1.getLuck() + 1)) {
                            int hit = e1.getAttack() - players.getDefense();
                            System.out.println(eName + " still hit for " + hit + "!");
                            players.takeHit(e1.getAttack() - players.getDefense());
                        }
                        break;

                    // Invalid command:
                    default:
                        System.out.println("Invalid command.");
                        break;
                }

                // Check to see if anyone died:
                if (e1.getHp() <= 0) {
                    int amt = e1.generateGold();
                    players.addGold(amt);
                    System.out.println("You gained " + amt + " gold!");
                    System.out.println(e1.died());
                    combat = false;

                    //Layer increases if boss defeated:
                    if (num == 5) {
                        stage++;

                        //End tutorial / explain level up:
                        if (stage == 2) {
                            System.out.println("Enemies get tougher for every stage, but so do you.");
                            System.out.println("When you level up, the stat of your choosing goes up");
                        }

                        //End game / Player defeated final boss:
                        if (stage == 5) {
                            System.out.println("\nYou defeated the Servant of the stage");
                            System.out.println("Congratulations!");
                            System.out.println("***You have successfully completed FATE STAY DUNGEON ***\n"
                                    + "\nYou can keep going however, servants will be stronger");
                        }

                        // Level up:
                        System.out.println("\nYou leveled up!");
                        System.out.println("What do you want to upgrade?");
                        System.out.println("---[A]ttack, [D]efense, [H]ealth---");
                        String line2 = sc.next().toUpperCase();
                        char upgrade = line2.charAt(0);
                        boolean levelPhase = true;

                        //Level Loop active (for invalid commands):
                        while (levelPhase) {

                            // Switch for options (Attack, Defense, Health):
                            switch (upgrade) {

                                case 'A':
                                    System.out.println("You upgraded attack!");
                                    players.levelUp(1);
                                    levelPhase = false;
                                    break;

                                case 'D':
                                    System.out.println("You upgraded defense!");
                                    players.levelUp(2);
                                    levelPhase = false;
                                    break;

                                case 'H':
                                    System.out.println("You upgraded health!");
                                    players.levelUp(3);
                                    levelPhase = false;
                                    break;

                                default:
                                    System.out.println("Invalid command.");
                                    break;
                            }
                        }
                        System.out.println("--------------------------------------------------------");
                    }
                }

                //If player dies:
                if (players.getHp() <= 0) {
                    combat = false;
                    System.out.println(players.died());
                    gameRunning = false;
                    System.exit(0);
                }
            
            }
        }
    }
}
        
    

        
                
            
        
